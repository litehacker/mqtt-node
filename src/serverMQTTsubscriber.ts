import axios from "axios";
import { connect } from "mqtt"; // import connect from mqtt
import * as dotenv from "dotenv"; // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import
dotenv.config();
let valibleVersion = 0x00000002;
const client = connect("mqtt://" + process.env.MQTT_BROKER_URL); // create a client
const _topicRead = process.env.TOPICTOREAD;
const _topicPub = process.env.TOPICTOPUBLISH;
const frimwere = [








  "687A3303781B4413F10773BB4618030CFA9AF004693B613837184618BD8046BDB088B58060F8AF00607A60B961FB230569FBE008441368FA2B3C781B69FBD00761FB330168BB69FADBF2429ABF00E00061BB69FB69BBE008441368FA2B2C781B69BBD00761BB330168BB69BADBF2429ABF00E000617B69BB697BE008441368FA2B21781B697BD007617B330168BB697ADBF2429ABF00E000330169BB18D168FA69BB697A3B011AD36878461AFAB0F0043720BF00BD8046BDAF00B58021002280F00448254824FA7DFC70F000F7FF48232280FE5748202100FA72F004F000481E481EFCA1FE4CF7FF21002280F004481A4819FA67FCD0F000F7FF48182280FE4148152100FA5CF004F00048134814FD0BFE36F7FF21002280F004480F480EFA51FD46F000F7FF480E2280FE2B480A2100FA46F004F00048084808FD81FE20F7FF21002280F0044804F44FFA3BF00170FABF00FD3FBF00BD802000032008011F4C08011F50B096B580F001AF00F000FCCFF000FA59F000FB55F000FA9BF000FAC7F000FAFB2002FB23FCE2F7FF20002103F864F7FF20002101FD74F7FF657B2300F7FFE0046D7BFF89657B33012B016D7BF001DDF72001F872FA1AF001F00120012001FA17FA14F001F887230020193053FD4AF0002219233248B349B2FC27F003",




  "4413687B7BBB781A440B6839429A781B7BBBD10773BB33017B3B7BBAD3EB429ABF00E0007B3B7BBAD101429AE009230133017BFB7BFA73FB7B3B7B79429A1ACB2300DDD737104618BD8046BDB084B5806078AF0073FB2300F900F00160BB460323C8E02049142205F0034814F44FF830220673FA48116879F8BBF00368784910FFA5F7FF73FB46032B007BFBF001D10E4602F8E51AD368BB720FF242D9014293FA21F0012B007BFBE000D0DBBF00BF0046BD3710BF00BD80200000B8200004D008011F6CB084B5806078AF0073FB2300F8C4F00160BB460323C8E01F4913220BF00248132364FFF46879222DF00348104910F880F7FF68784603FF6A7BFB73FBD10E2B00F8AAF00168BB4602F2421AD34293720FF001D9017BFBF9E6D0DC2B00BF00E0003710BF00BD8046BD200000C0200004D008011F70B084B5806078AF0073FB2300F88AF00160BB46032364E0284918221EF00248182364FFBA6879220AF00348154915F846F7FF68784603FF307BFB73FBD1052B0068784911FF27F7FF73FB46032B007BFBF001D10E4602F8671AD368BB720FF242D9014293F9A3F0012B007BFBE000D0D3BF00BF0046BD3710BF00BD80200000CC200004D008011F6C08011F78B084B5806078AF0073FB2300F844F00160BB46032364E02949182223",
  "F0024818F44FFF742215637A48156879FFFFF00268784914FEE9F7FF73FB46032B007BFB4911D105F7FF68784603FEE07BFB73FBD10E2B00F820F00168BB4602F2421AD34293720FF001D9017BFBF95CD0D22B00BF00E0003710BF00BD8046BD200000EC200004D008011F8008011F90B084B5806078AF0073FB2300FFFEF00060BB46032364E02949182211F0024818F44FFF2E2209637A48156879FFB9F00268784914FEA3F7FF73FB46032B007BFB4911D105F7FF68784603FE9A7BFB73FBD10E2B00FFDAF00068BB4602F2421AD34293720FF001D9017BFBF916D0D22B00BF00E0003710BF00BD8046BD20000110200004D008011FA008011F78B082B5806078AF002226236448064905FEEFF00270FAF44FFFBCF0003708BF00BD8046BD20000124200004D0B082B5806078AF004908687AF00348082364FCAB4906222EF0024806201EFED4FFA2F0003708BF00BD8046BD08011FA82000014C200004D0B086B5804603AF0279FB71FBF107733BF1070208230A010C23019300F00248037A3BFC2137104618BD8046BD20000478B082B5804603AF0071FB460A71BB461321102200F001480979FBFAF3F7FF461879BBFFD7F7FF46182201FFD348032110FAE6F0013708BF00BD8046BD40010800B084B5804603AF00220071FB480B2110",


  "75FB3B012B007DFB7DBBD0040304F003D0EF2B00F7FF20224603FE43687B4FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
];
if (!_topicRead) {
  throw new Error("No env file");
}
if (!_topicPub) {
  throw new Error("No env file");
}
const debug = async (data: any[]) => {
  for (let i = 0; i < data.length; i++) {
    // Wrap the MQTT logic in a Promise
    const responsePromise = new Promise((resolve) => {
      // Subscribe to the response topic
      client.subscribe(_topicRead);

      // Listen for the response
      client.on("message", function (topic, message) {
        if (topic === _topicRead) {
          const response = message.toString("utf-8");
          // Resolve the Promise with the response
          resolve(response);
        }
      });
    });

    // Publish the message
    client.publish(_topicPub, data[i]);

    // Wait for the response
    const response = await responsePromise;

    // Process the response
    console.log("Received response:", response);
    // Perform further actions with the response
    console.log(data[i]);
  }
};

client.on("connect", function () {
  client.subscribe(_topicRead, function (err) {
    if (!err) {
      console.log("connected,_topicRead:", _topicRead, "_topicPub:", _topicPub);
    }
  });
});

client.on("message", function (topic, message) {
  // {"operationType":"check"}

  // {
  //   "operationType":"payment",
  //   "content":{
  //     "cardID"
  //   }
  // }
  try {
    let time = new Date().getTime();
    const data: {
      operationType: "check" | "payment" | "update";
      content: any;
    } = JSON.parse(message.toString("utf-8"));
    if (data.operationType === "check") {
      const Version = data.content.version.toString(16);
      if (Version < valibleVersion) {
        debug(frimwere);
        console.log("new version avalible");
        console.log(Version);
      } else {
        if (_topicPub) {
          console.log("<200, good!");
          client.publish(_topicPub, "<200, good!");
        }
      }
    } else if (
      data.operationType === "payment" &&
      data.content &&
      topic === _topicRead
    ) {
      let config = {
        method: "post",
        maxBodyLength: Infinity,
        url: process.env.FIREBASE_URL,
        headers: {
          "Content-Type": "text/plain",
        },
        data: data.content,
      };

      axios
        .request(config)
        .then((response) => {
          console.log(
            JSON.stringify(response.status),
            new Date().getTime() - time,
            JSON.stringify(response.data)
          );
          if (_topicPub) {
            client.publish(
              _topicPub,
              "<" +
                JSON.stringify(response.status) +
                "," +
                JSON.stringify(response.data) +
                "!"
            );
          }
        })
        .catch((error) => {
          console.log(error);
        });
    } else if (data.operationType === "update") {
      console.log(data.content.status);
    }
    //client.end();
  } catch (e) {
    console.log(e);
  }
});
